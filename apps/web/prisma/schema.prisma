// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  tokens   Token[]
  projects ProjectUsers[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model Project {
  id      String  @id @default(cuid())
  name    String
  slug    String  @unique
  logo    String?
  default Boolean @default(false)

  budget Float @default(0)

  plan                String    @default("FREE")
  usersLimit          Int       @default(1)
  externalReferenceId String?   @unique
  billingEndsAt       DateTime?

  invites ProjectInvite[]
  users   ProjectUsers[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  usageCheckedAt DateTime   @default(now())
  categories     Category[]

  @@index(usageCheckedAt(sort: Asc))
}

model ProjectInvite {
  email     String
  expiresAt DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

model Category {
  id     String @id @default(cuid())
  name   String
  color  String
  budget Float  @default(0)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  categoryExpenses CategoryExpense[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([projectId])
}

model CategoryExpense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  active      Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@index([categoryId])
}
